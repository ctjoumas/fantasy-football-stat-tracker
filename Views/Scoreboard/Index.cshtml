@model List<Team>

@{
    ViewData["Title"] = "Scoreboard";
}

<div class="scoreboard-container">
    <!-- Main Scoreboard Card Container -->
    <div class="scoreboard-main-card">
        <!-- Week Selection Header -->
        <div class="scoreboard-header">
            <div class="row justify-content-center">
                <div class="col-12 col-md-6">
                    <div class="week-selection-container">
                        <label class="week-selection-label">Select Week</label>
                        <form asp-controller="Scoreboard" asp-action="Index" method="post">
                            <select name="week" class="form-control" asp-items="@ViewBag.weeks" onchange="this.form.submit();"></select>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Unified Team Summary Header -->
        <div class="team-summary-section">
            <div class="unified-team-header">
                <!-- Team 1 -->
                <div class="team-summary-item">
                    @if (Model.Count > 0)
                    {
                        var team1 = Model[0];
                        byte[] bytes1 = (byte[])team1.OwnerLogo;
                        string base64String1 = Convert.ToBase64String(bytes1, 0, bytes1.Length);
                        var logoSource1 = "data:image/png;base64," + base64String1;
                        var totalTeamPoints1 = team1.TotalFantasyPoints.ToString("0.00");
                        
                        <img class="team-summary-logo" src="@logoSource1" alt="Team Logo" />
                        <div class="team-summary-score">@totalTeamPoints1</div>
                    }
                </div>

                <!-- VS Divider -->
                <div class="vs-divider">VS</div>

                <!-- Team 2 -->
                <div class="team-summary-item">
                    @if (Model.Count > 1)
                    {
                        var team2 = Model[1];
                        byte[] bytes2 = (byte[])team2.OwnerLogo;
                        string base64String2 = Convert.ToBase64String(bytes2, 0, bytes2.Length);
                        var logoSource2 = "data:image/png;base64," + base64String2;
                        var totalTeamPoints2 = team2.TotalFantasyPoints.ToString("0.00");
                        
                        <img class="team-summary-logo" src="@logoSource2" alt="Team Logo" />
                        <div class="team-summary-score">@totalTeamPoints2</div>
                    }
                </div>
            </div>
        </div>

        <!-- Main Scoreboard Content -->
        <div class="scoreboard-content">
            <div class="row no-gutters">
                <!-- Team 1 Players -->
                <div class="col-5">
                    @if (Model.Count > 0)
                    {
                        var team = Model[0];
                        <div class="team-players-section">
                            <!-- Players List -->
                            @if (team.Players.Count == 0)
                            {
                                <div class="select-team-link">
                                    @Html.ActionLink("Click here to select this week's roster", "Index", "SelectTeam2", new { week = team.Week, ownerId = team.OwnerId }, new { @class = "btn btn-primary" })
                                </div>
                            }
                            else
                            {
                                @foreach (var player in team.Players)
                                {
                                    var matchupDisplay = "";
                                    var day = player.GameTime.DayOfWeek.ToString().Substring(0, 3);
                                    var hour = Convert.ToInt32(player.GameTime.ToString("hh"));
                                    var minute = player.GameTime.ToString("mm");
                                    var pmOrAm = player.GameTime.ToString("tt", System.Globalization.CultureInfo.InvariantCulture);
                                    var opponentAbbreviation = player.OpponentAbbreviation.ToUpper();
                                    var gameLocation = player.HomeOrAway.Equals("home") ? "vs" : "@";


                                    <div class="player-row @(player.GameInProgress ? "in-progress" : "")">
                                        <img class="player-headshot" src="@Html.DisplayFor(modelItem => player.Headshot)" alt="Player headshot" />
                                        
                                        <div class="player-info">
                                            <div class="player-name">@Html.DisplayFor(modelItem => player.Name)</div>
                                            <div class="player-details">
                                                @player.TeamAbbreviation.ToUpper() - @player.TruePosition<br />
                                                <span class="mobile-hide-details">
                                                    @if (player.GameCanceled)
                                                    {
                                                        <span style="color:#FF7F7F">@matchupDisplay</span>
                                                    }
                                                    else
                                                    {
                                                        @matchupDisplay
                                                    }
                                                </span>
                                            </div>
                                        </div>
                                        
                                        <div class="player-points @(player.GameInProgress ? "in-progress" : "")">
                                            @{
                                                var playerPoints = player.Points.ToString("0.00");
                                                if (!player.GameEnded && !player.GameCanceled && !player.GameInProgress)
                                                {
                                                    playerPoints = "-";
                                                }
                                            }
                                            @playerPoints
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>

                <!-- Position Labels Column -->
                <div class="col-2">
                    <div class="position-labels-section">
                        @{
                            string[] positions = { "QB", "RB", "RB", "WR", "WR", "FLEX", "TE", "K", "DEF" };
                        }
                        @for (int i = 0; i < 9; i++)
                        {
                            <div class="position-column">
                                @positions[i]
                            </div>
                        }
                    </div>
                </div>

                <!-- Team 2 Players -->
                <div class="col-5">
                    @if (Model.Count > 1)
                    {
                        var team = Model[1];
                        <div class="team-players-section">
                            <!-- Players List -->
                            @if (team.Players.Count == 0)
                            {
                                <div class="select-team-link">
                                    @Html.ActionLink("Click here to select this week's roster", "Index", "SelectTeam2", new { week = team.Week, ownerId = team.OwnerId }, new { @class = "btn btn-primary" })
                                </div>
                            }
                            else
                            {
                                @foreach (var player in team.Players)
                                {
                                    var matchupDisplay = "";
                                    var day = player.GameTime.DayOfWeek.ToString().Substring(0, 3);
                                    var hour = Convert.ToInt32(player.GameTime.ToString("hh"));
                                    var minute = player.GameTime.ToString("mm");
                                    var pmOrAm = player.GameTime.ToString("tt", System.Globalization.CultureInfo.InvariantCulture);
                                    var opponentAbbreviation = player.OpponentAbbreviation.ToUpper();
                                    var gameLocation = player.HomeOrAway.Equals("home") ? "vs" : "@";

                                    if (player.GameEnded)
                                    {
                                        matchupDisplay = "Final " + player.FinalScoreString + " " + gameLocation + " " + opponentAbbreviation;
                                    }
                                    else if (player.GameCanceled)
                                    {
                                        matchupDisplay = "Canceled";
                                    }
                                    else if (player.GameInProgress)
                                    {
                                        matchupDisplay = player.TimeRemaining + " " + player.CurrentScoreString + " " + gameLocation + " " + opponentAbbreviation;
                                    }
                                    else
                                    {
                                        matchupDisplay = day + " " + hour + ":" + minute + pmOrAm + " " + gameLocation + " " + opponentAbbreviation;
                                    }

                                    <div class="player-row @(player.GameInProgress ? "in-progress" : "")">
                                        <img class="player-headshot" src="@Html.DisplayFor(modelItem => player.Headshot)" alt="Player headshot" />
                                        
                                        <div class="player-info">
                                            <div class="player-name">@Html.DisplayFor(modelItem => player.Name)</div>
                                            <div class="player-details">
                                                @player.TeamAbbreviation.ToUpper() - @player.TruePosition<br />
                                                <span class="mobile-hide-details">
                                                    @if (player.GameCanceled)
                                                    {
                                                        <span style="color:#FF7F7F">@matchupDisplay</span>
                                                    }
                                                    else
                                                    {
                                                        @matchupDisplay
                                                    }
                                                </span>
                                            </div>
                                        </div>
                                        
                                        <div class="player-points @(player.GameInProgress ? "in-progress" : "")">
                                            @{
                                                var playerPoints = player.Points.ToString("0.00");
                                                if (!player.GameEnded && !player.GameCanceled && !player.GameInProgress)
                                                {
                                                    playerPoints = "-";
                                                }
                                            }
                                            @playerPoints
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>